generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum StatusCart {
  ABERTO
  FECHADO
}

enum StatusUser {
  S
  N
}

model User {
  id                String     @id @default(uuid())
  name              String
  email             String     @unique
  phone             String
  role              Role       @default(MEMBER)
  passwordHash      String     @map("password_hash")
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")
  orders            Order[]
  carts             Cart[]
  imageOriginalName String     @map("image_original_name")
  imageFakeName     String     @map("image_fake_name")
  imageType         String     @default("") @map("image_type")
  birthdate         DateTime   @map("birthdate")
  status            StatusUser @default(S)

  @@map("users")
}

model Product {
  id            String          @id @default(uuid())
  name          String
  description   String?
  price         Decimal
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  orderItems    OrderItem[]
  cartItems     CartItem[]
  productImages ProductImages[]

  @@map("products")
}

model ProductImages {
  id                String  @id @default(uuid())
  imageOriginalName String  @map("image_original_name")
  imageFakeName     String  @map("image_fake_name")
  imageType         String  @default("") @map("image_type")
  product           Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String  @map("product_id")
  isPrincipal       Boolean @map("is_principal")

  @@map("product_images")
}

model Order {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  totalPrice Float       @map("price_total")
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     String?     @map("user_id")
  userName   String?     @map("user_name")
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(uuid())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String   @map("order_id")
  product      Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId    String?  @map("product_id")
  quantity     Int
  productName  String   @map("product_name")
  productPrice Float    @map("product_price")
  totalPrice   Float    @map("price_total")

  @@map("order_items")
}

model Cart {
  id        String     @id @default(uuid())
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?    @map("user_id")
  userName   String?     @map("user_name")
  cartItems CartItem[]
  status    StatusCart @default(ABERTO)
  createdAt DateTime   @default(now()) @map("created_at")

  @@map("carts")
}

model CartItem {
  id          String   @id @default(uuid())
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId      String   @map("cart_id")
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId   String?  @map("product_id")
  quantity    Int
  productName String   @map("product_name")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("cart_items")
}
