generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum StatusCart {
  ABERTO
  FECHADO
}

enum StatusUser {
  S
  N
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  phone        String
  role         Role     @default(MEMBER)
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  orders       Order[]
  cart         Cart?
  imageOriginalName    String   @map("image_original_name")
  imageFakeName    String   @map("image_fake_name")
  imageType    String   @map("image_type") @default("")
  birthdate    DateTime @map("birthdate")
  status    StatusUser @default(S)

  @@map("users")
}

model Product {
  id            String          @id @default(uuid())
  name          String
  description   String?
  price         Decimal
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  orderItems    OrderItem[]
  cartItems     CartItem[]
  productImages ProductImages[]

  @@map("products")
}

model ProductImages {
  id          String  @id @default(uuid())
  imageOriginalName    String   @map("image_original_name")
  imageFakeName    String   @map("image_fake_name")
  imageType    String   @map("image_type") @default("")
  product     Product @relation(fields: [productId], references: [id])
  productId   String  @map("product_id")
  isPrincipal Boolean @map("is_principal")

  @@map("product_images")
}

model Order {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now()) @map("created_at")
  totalPrice Float       @map("price_total")
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @map("user_id")
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(uuid())
  order        Order   @relation(fields: [orderId], references: [id])
  orderId      String  @map("order_id")
  product      Product @relation(fields: [productId], references: [id])
  productId    String  @map("product_id")
  quantity     Int
  productPrice Float   @map("product_price")
  totalPrice   Float   @map("price_total")

  @@map("order_items")
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique @map("user_id")
  cartItems CartItem[]
  status    StatusCart @default(ABERTO)

  @@map("carts")
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String  @map("cart_id")
  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")
  quantity  Int

  @@map("cart_items")
}
